	ArxPaxRegAddr_Controller_output_current_rating = 0x0000, // The drive maximum phase current rating
	ArxPaxRegAddr_Controller_input_voltage_rating = 0x0001, // The drive maximum input voltage rating
	ArxPaxRegAddr_Switching_frequency = 0x0002, // The switching frequency of the 3 phase bridge
	ArxPaxRegAddr_Dead_time = 0x0003, // The time interval during which MOSFETS of the same bridge leg can't be turned on concurrently
	ArxPaxRegAddr_Baud_rate = 0x0004, // Communications represents the number of symbols transferred per second
	ArxPaxRegAddr_Slave_ID = 0x0005, // Multi drop slave ID
	ArxPaxRegAddr_HW_configuration_vector = 0x0006,
	ArxPaxRegAddr_Current_regulator_Kp = 0x0007, // The current regulator's proportional gain
	ArxPaxRegAddr_Current_regulator_Ki = 0x0008, // The current regulator's integral gain
	ArxPaxRegAddr_Speed_regulator_Kp = 0x0009, // The speed regulator's proportional gain
	ArxPaxRegAddr_Speed_regulator_Ki = 0x000A, // The speed regulator's integral gain
	ArxPaxRegAddr_Speed_regulator_mode = 0x000B, // 0 is speed / 1 is torque / 2 is torque mode with speed limiting
	ArxPaxRegAddr_Pll_Kp_old = 0x000C, // The old phase locked loop's proportional gain
	ArxPaxRegAddr_Pll_Ki_old = 0x000D, // The old phase locked loop's integral gain
	ArxPaxRegAddr_Phase_A_current_gain = 0x000E, // Current feedback gain at the ADC
	ArxPaxRegAddr_Voltage_gain = 0x000F, // Voltage feedback gain (Vdc and Vphase) at the ADC
	ArxPaxRegAddr_Phase_C_current_gain = 0x0010, // Current feedback gain at the ADC
	ArxPaxRegAddr_Throttle_gain = 0x0011, // Throttle feedback gain at the ADC
	ArxPaxRegAddr_Brake_gain = 0x0012, // Brake feedback gain at the ADC
	ArxPaxRegAddr_BMS_gain = 0x0013, // BMS feedback gain at the ADC
	ArxPaxRegAddr_DC_voltage_filter_shift = 0x0014, // DC voltage measurement low pass filter shift value in bits
	ArxPaxRegAddr_Temperature_filter_shift = 0x0015, // Temperature measurement low pass filter shift value in bits
	ArxPaxRegAddr_DQ_axis_filter_shift = 0x0016, // DQ axis low pass filter shift value in bits
	ArxPaxRegAddr_Flux_filter_shift = 0x0017, // Flux filter shift value in bits
	ArxPaxRegAddr_Flux_hpf_shift = 0x0018, // Flux high pass filter shift value in bits
	ArxPaxRegAddr_Flux_frequency_filter_shift = 0x0019, // Flux frequency filter shift value in bits
	ArxPaxRegAddr_Voltage_feedback_filter_cutoff_frequency = 0x001A, // Voltage feedback filter cutoff frequency
	ArxPaxRegAddr_Averaged_over_current_trip_threshold = 0x001B, // Averaged phase current over current threshold
	ArxPaxRegAddr_Averaged_over_current_trip_sample_length = 0x001C, // Number of phase current samples the averaged current is based on
	ArxPaxRegAddr_Instantaneous_over_current_trip_threshold = 0x001D, // Instantaneous over current trip threshold
	ArxPaxRegAddr_Phase_Current_RMS_Filter_Shift = 0x001E, // Phase Current RMS Filter Shift
	ArxPaxRegAddr_Maximum_interrupt_execution_time = 0x001F, // Maximum allowable ISR execution time as fraction of the base ISR time
	ArxPaxRegAddr_Command_timeout_threshold = 0x0020, // Maximum allowable amount of time between valid command packets for comm dropour detection
	ArxPaxRegAddr_DC_voltage_trip_clear_hysterisis = 0x0021, // % of rated system voltage below  trip threshold required to clear the over voltage fault
	ArxPaxRegAddr_Heatsink_over_temperature_trip_threshold = 0x0022, // Maximum controller temperature
	ArxPaxRegAddr_Controller_foldback_starting_temperature = 0x0023, // Controller temperature at which output current foldback begins
	ArxPaxRegAddr_Controller_foldback_ending_temperature = 0x0024, // Controller temperature at which output current is folded back to 0 Amperes
	ArxPaxRegAddr_Controller_temperature_feedback_V_at_0_C = 0x0025, // Controller temperature sensor's output voltage at 0 C
	ArxPaxRegAddr_Controller_temperature_feedback_V_at_25_C = 0x0026, // Controller temperature sensor's output voltage at 25 C
	ArxPaxRegAddr_Controller_temperature_feedback_V_at_50_C = 0x0027, // Controller temperature sensor's output voltage at 50 C
	ArxPaxRegAddr_Controller_temperature_feedback_V_at_75_C = 0x0028, // Controller temperature sensor's output voltage at 75 C
	ArxPaxRegAddr_Controller_temperature_feedback_V_at_100_C = 0x0029, // Controller temperature sensor's output voltage at 100 C
	ArxPaxRegAddr_Controller_temperature_feedback_V_at_125_C = 0x002A, // Controller temperature sensor's output voltage at 125 C
	ArxPaxRegAddr_Reserved_L3_21 = 0x002B,
	ArxPaxRegAddr_Reserved_L3_22 = 0x002C,
	ArxPaxRegAddr_Antitheft_enable_time = 0x002D, // Time since bootup to allow enabling of the anti theft feature (0 to always allow)
	ArxPaxRegAddr_Kd_anti_theft = 0x002E, // Speed proportional term for anti theft feature defined in per unit current / per unit speed
	ArxPaxRegAddr_Open_circuit_voltage_test_window = 0x002F, // Open circuit test voltage bounds
	ArxPaxRegAddr_High_Lowside_turn_on_voltage_test_window = 0x0030, // Hi/Lo side turn on test voltage bounds
	ArxPaxRegAddr_Average_Command_timeout_threshold = 0x0031, // Maximum allowable average amount of time between valid command packets (for slow update rate or missed packets)
	ArxPaxRegAddr_Remote_comm_loss_braking_current_limit = 0x0032, // Per unit braking current limit for communication loss, where the speed setpoint is set to zero
	ArxPaxRegAddr_Current_Regulator_bandwidth = 0x0033, // When non-zero is used with Rs and Ls to calculate the Kp and Ki terms
	ArxPaxRegAddr_PLL_bandwidth = 0x0034, // When non zero sets the PLL Kp and Ki terms
	ArxPaxRegAddr_PLL_damping = 0x0035, // When non zero sets the PLL Kp and Ki terms
	ArxPaxRegAddr_Pll_Kp = 0x0036, // new PLL Kp gain
	ArxPaxRegAddr_Pll_Ki = 0x0037, // new PLL Ki gain
	ArxPaxRegAddr_CAN_baud_rate = 0x0038, // CAN baud rate in kbps (legal values 1000,500,250 or 125  )
	ArxPaxRegAddr_CAN_ID = 0x0039, // CAN ID
	ArxPaxRegAddr_communications_configuration_vector = 0x003A,
	ArxPaxRegAddr_Battery_resistance = 0x003B, // Reserved for future use
	ArxPaxRegAddr_New_Phase_A_current_gain = 0x003C, // Current feedback gain at the ADC, when zero, auto migrated in rev 5.8.11 from old gains and hwconfig bit 14
	ArxPaxRegAddr_New_Phase_C_current_gain = 0x003D, // Current feedback gain at the ADC, when zero, auto migrated in rev 5.8.11 from old gains and hwconfig bit 14
	ArxPaxRegAddr_Flash_parameter_read_access_code = 0x003E, // When not zero, you will need to enter this code to read parameters (only checked at bootup)
	ArxPaxRegAddr_Hall_stall_fault_time = 0x003F, // Time to fault when no change of state on hall signals and running with >20% motor current
	ArxPaxRegAddr_Baud_rate_port2 = 0x0040, // Communications represents the number of symbols transferred per second
	ArxPaxRegAddr_Slave_ID_port2 = 0x0041, // Multi drop slave ID for second comm port
	ArxPaxRegAddr_Alternate_display_protocol = 0x0042, // 0=disabled, 1=SWLCD open 9 mode, 2=SWLCD(closed) ,3=reserved 4= KM5 (open) 9mode, 5= KM5 (open) 5mode
	ArxPaxRegAddr_Saved_software_revision = 0x0043, // Software version when parameters were last saved to flash memory
	ArxPaxRegAddr_Kp_anti_theft = 0x0044, // Position proportional term for anti theft feature defined in per unit current per mechanical revolution
	ArxPaxRegAddr_Lm = 0x0045, // Motor magnetizing inductance (default 0)
	ArxPaxRegAddr_Rated_system_voltage = 0x0046, // System voltage rating is the battery voltage
	ArxPaxRegAddr_Rated_motor_current = 0x0047, // Nameplate motor peak phase current rating
	ArxPaxRegAddr_Rated_motor_speed = 0x0048, // Nameplate no load rated motor RPM
	ArxPaxRegAddr_Rated_motor_power = 0x0049, // Motor rated electrical power = rated Vbattery * rated Ibattery
	ArxPaxRegAddr_Ls = 0x004A, // Motor phase to neutral stator inductance
	ArxPaxRegAddr_Rs = 0x004B, // Motor phase to neutral stator resistance
	ArxPaxRegAddr_Kv = 0x004C, // Motor back electromotive force constant that is equivalent to per unit system voltage/per unit rated speed
	ArxPaxRegAddr_Motor_position_sensor_type = 0x004D, // 0 is hall based / 1 is hall start and sensorless run / 2 is sensorless / 3 is reserved
	ArxPaxRegAddr__of_motor_pole_pairs = 0x004E, // The motor's number of electrical pole pairs
	ArxPaxRegAddr_Hall_offset = 0x004F, // Hall sensor offset angle
	ArxPaxRegAddr_Hall_sector_0_ = 0x0050, // Motor sector represented by Hall sequence 000   -1=illegal state
	ArxPaxRegAddr_Hall_sector_1_ = 0x0051, // Motor sector represented by Hall sequence 001
	ArxPaxRegAddr_Hall_sector_2_ = 0x0052, // Motor sector represented by Hall sequence 010
	ArxPaxRegAddr_Hall_sector_3_ = 0x0053, // Motor sector represented by Hall sequence 011
	ArxPaxRegAddr_Hall_sector_4_ = 0x0054, // Motor sector represented by Hall sequence 100
	ArxPaxRegAddr_Hall_sector_5_ = 0x0055, // Motor sector represented by Hall sequence 101
	ArxPaxRegAddr_Hall_sector_6_ = 0x0056, // Motor sector represented by Hall sequence 110
	ArxPaxRegAddr_Hall_sector_7_ = 0x0057, // Motor sector represented by Hall sequence 111   -1=illegal state
	ArxPaxRegAddr_Hall_interpolation_start_frequency = 0x0058, // Electrical frequency to start interpolating the halls
	ArxPaxRegAddr_Hall_interpolation_stop_frequency = 0x0059, // Electrical frequency to stop interpolating the halls
	ArxPaxRegAddr_Motor_over_temperature_trip_threshold = 0x005A, // Maximum motor temperature
	ArxPaxRegAddr_Motor_foldback_starting_temperature = 0x005B, // Motor temperature at which output current foldback begins
	ArxPaxRegAddr_Motor_foldback_ending_temperature = 0x005C, // Motor temperature at which output current is folded back to 0 Amperes
	ArxPaxRegAddr_Temperature_feedback_V_at_0_C = 0x005D, // Temperature sensor's output voltage at 0 C
	ArxPaxRegAddr_Temperature_feedback_V_at_25_C = 0x005E, // Temperature sensor's output voltage at 25 C
	ArxPaxRegAddr_Temperature_feedback_V_at_50_C = 0x005F, // Temperature sensor's output voltage at 50 C
	ArxPaxRegAddr_Temperature_feedback_V_at_75_C = 0x0060, // Temperature sensor's output voltage at 75 C
	ArxPaxRegAddr_Temperature_feedback_V_at_100_C = 0x0061, // Temperature sensor's output voltage at 100 C
	ArxPaxRegAddr_Temperature_feedback_V_at_125_C = 0x0062, // Temperature sensor's output voltage at 125 C
	ArxPaxRegAddr_Overload_continous_current = 0x0063, // Current as % of nameplate at which the motor can run without heating up
	ArxPaxRegAddr_Overload_heating_current = 0x0064, // Current as % of nameplate at which the motor will heat up to 100% over the heating time
	ArxPaxRegAddr_Overload_heating_time = 0x0065, // Time at which 100% heat is accumulated while operating at the Overload heating current
	ArxPaxRegAddr_Overload_cooling_current = 0x0066, // Current as % of nameplate at which the motor will cool to 0% over the cooling time
	ArxPaxRegAddr_Overload_cooling_time = 0x0067, // Time at which 100% heat is dissapated while operating at the Overload cooling current
	ArxPaxRegAddr_Overload_foldback_start = 0x0068,
	ArxPaxRegAddr_Overload_foldback_end = 0x0069,
	ArxPaxRegAddr_Sensorless_open_loop_starting_current = 0x006A, // Open loop sensorless AC current injection limit with respect to rated current
	ArxPaxRegAddr_Sensorless_open_loop_injection_current_ramp_time = 0x006B, // Duration of time it takes to reach the sensorless AC current injection limit
	ArxPaxRegAddr_Sensorless_closed_loop_enable_frequency = 0x006C, // Motor electrical frequency at which the transition from open loop to closed loop sensorless control occurs
	ArxPaxRegAddr_Sensorless_open_loop_freq_ramp_time_ms = 0x006D, // Duration of time it takes to go from DC to the sensorless closed loop enable frequency
	ArxPaxRegAddr_Sensorless_open_loop_dc_current_hold_time = 0x006E, // The length of time the controller maintain DC current in the motor windings during open loop start up
	ArxPaxRegAddr_Field_weakening_speed_1 = 0x006F, // Field weakening map speed setpoint 1
	ArxPaxRegAddr_Field_weakening_speed_2 = 0x0070, // Field weakening map speed setpoint 2
	ArxPaxRegAddr_Field_weakening_speed_3 = 0x0071, // Field weakening map speed setpoint 3
	ArxPaxRegAddr_Field_weakening_speed_4 = 0x0072, // Field weakening map speed setpoint 4
	ArxPaxRegAddr_Field_weakening_speed_5 = 0x0073, // Field weakening map speed setpoint 5
	ArxPaxRegAddr_Field_weakening_speed_6 = 0x0074, // Field weakening map speed setpoint 6
	ArxPaxRegAddr_Field_weakening_speed_7 = 0x0075, // Field weakening map speed setpoint 7
	ArxPaxRegAddr_Field_weakening_speed_8 = 0x0076, // Field weakening map speed setpoint 8
	ArxPaxRegAddr_Field_weakening_current_1 = 0x0077, // Field weakening map current setpoint 1
	ArxPaxRegAddr_Field_weakening_current_2 = 0x0078, // Field weakening map current setpoint 2
	ArxPaxRegAddr_Field_weakening_current_3 = 0x0079, // Field weakening map current setpoint 3
	ArxPaxRegAddr_Field_weakening_current_4 = 0x007A, // Field weakening map current setpoint 4
	ArxPaxRegAddr_Field_weakening_current_5 = 0x007B, // Field weakening map current setpoint 5
	ArxPaxRegAddr_Field_weakening_current_6 = 0x007C, // Field weakening map current setpoint 6
	ArxPaxRegAddr_Field_weakening_current_7 = 0x007D, // Field weakening map current setpoint 7
	ArxPaxRegAddr_Field_weakening_current_8 = 0x007E, // Field weakening map current setpoint 18
	ArxPaxRegAddr_Motor_features = 0x007F,
	ArxPaxRegAddr_Hall_Interpolation_Transitions = 0x0080, // number of hall transitions to start interpolating when above the interpolation frequency
	ArxPaxRegAddr_Maximum_Field_Weakening_current = 0x0081, // If not zero, then this is the limit for automatic field weakening (the table is ignored)
	ArxPaxRegAddr_Hall_angle_current_correction = 0x0082, // Hall correction angle at rated current
	ArxPaxRegAddr_Alternate_rated_motor_power = 0x0083, // rated motor power in alternate speed/power limit mode
	ArxPaxRegAddr_Rolling_start_sensorless_open_loop_starting_current = 0x0084, // Pedalec start open loop sensorless AC current injection limit with respect to rated current
	ArxPaxRegAddr_Rolling_start_sensorless_open_loop_freq_ramp_time_ms = 0x0085, // Pedalec start duration of time it takes to go from DC to the sensorless closed loop enable frequency
	ArxPaxRegAddr_Rolling_start_sensorless_closed_loop_enable_frequency = 0x0086, // Motor electrical frequency at which the transition from open loop to closed loop sensorless control occurs
	ArxPaxRegAddr_High_battery_state_of_charge_foldback_starting_capacity = 0x0087, // Battery state of charge reading where the regen current begins to foldback in order to protect the battery
	ArxPaxRegAddr_High_battery_state_of_charge_foldback_end_capacity = 0x0088, // Battery state of charge reading at which the regen is folded back to 0 Amperes
	ArxPaxRegAddr_Motor_temperature_source = 0x0089, // Motor temperature sensor feedback source 0=brake2 1=brake1 2=bms 3=throttle
	ArxPaxRegAddr_Walk_mode_signal_source = 0x008A, // Walk mode signal source 0=cruise 1=pfs 2= brake1 3=brake2 4=serial(display)
	ArxPaxRegAddr_Alternate_power_switch_source = 0x008B, // Alternate power switch signal source 0=cruise 1=pfs 2= brake1 3=brake2 4=remote pwr sw 5=remote spd sw
	ArxPaxRegAddr_Alternate_speed_limit_switch_source = 0x008C, // Alternate speed limit switch signal source 0=cruise 1=pfs 2= brake1 3=brake2 4=remote pwr sw 5=remote spd sw 6=Throttle
	ArxPaxRegAddr_Low_battery_foldback_starting_voltage = 0x008D, // Battery voltage level at which output foldback begins in order to protect the battery
	ArxPaxRegAddr_Low_battery_foldback_end_voltage = 0x008E, // Battery voltage level at which the output is folded back to 0 Amperes
	ArxPaxRegAddr_Cold_battery_foldback_starting_temperature = 0x008F, // Battery temperature where the output current begins to foldback in order to protect the battery
	ArxPaxRegAddr_Cold_battery_foldback_ending_temperature = 0x0090, // Battery temperature at which the output is folded back to 0 Amperes
	ArxPaxRegAddr_Low_battery_state_of_charge_foldback_starting_capacity = 0x0091, // Battery state of charge reading where the output current begins to foldback in order to protect the battery
	ArxPaxRegAddr_Low_battery_state_of_charge_foldback_end_capacity = 0x0092, // Battery state of charge reading at which the output is folded back to 0 Amperes
	ArxPaxRegAddr_Fast_over_voltage_threshold = 0x0093, // Instantaneous DC over voltage trip threshold
	ArxPaxRegAddr_Fast_under_voltage_threshold = 0x0094, // Instantaneous DC under voltage trip threshold
	ArxPaxRegAddr_Slow_over_voltage_threshold = 0x0095, // Averaged DC over voltage trip threshold
	ArxPaxRegAddr_Slow_under_voltage_threshold = 0x0096, // Averaged DC under voltage trip threshold
	ArxPaxRegAddr_Throttle_deadband_threshold = 0x0097, // Voltage value that is defines the amount of throttle travel between neutral and active throttle
	ArxPaxRegAddr_Throttle_fault_range = 0x0098, // Voltage added/subtracted to the throttle's measured high/low reading in order determine if the input is valid or not
	ArxPaxRegAddr_Reserved_L1_1 = 0x0099, // Reserved for future use
	ArxPaxRegAddr_Maximum_braking_torque = 0x009A, // Maxium braking torque limit as a function maximum motor current
	ArxPaxRegAddr_Battery_current_limit = 0x009B, // Maximum controller imposed battery current limit when motoring equal to rated motor power/rated system voltage
	ArxPaxRegAddr_Regeneration_battery_current_limit = 0x009C, // Maximum controller imposed battery current limit when generating equal to rated motor power/rated system voltage
	ArxPaxRegAddr_Power_map_Watts_setpoint_1 = 0x009D, // Power map Wattage setpoint 1
	ArxPaxRegAddr_Power_map_Watts_setpoint_2 = 0x009E, // Power map Wattage setpoint 2
	ArxPaxRegAddr_Power_map_Watts_setpoint_3 = 0x009F, // Power map Wattage setpoint 3
	ArxPaxRegAddr_Power_map_Watts_setpoint_4 = 0x00A0, // Power map Wattage setpoint 4
	ArxPaxRegAddr_Power_map_Watts_setpoint_5 = 0x00A1, // Power map Wattage setpoint 5
	ArxPaxRegAddr_Power_map_Watts_setpoint_6 = 0x00A2, // Power map Wattage setpoint 6
	ArxPaxRegAddr_Power_map_Watts_setpoint_7 = 0x00A3, // Power map Wattage setpoint 7
	ArxPaxRegAddr_Power_map_Watts_setpoint_8 = 0x00A4, // Power map Wattage setpoint 8
	ArxPaxRegAddr_Power_map_speed_setpoint_1 = 0x00A5, // Power map speed setpoint 1
	ArxPaxRegAddr_Power_map_speed_setpoint_2 = 0x00A6, // Power map speed setpoint 2
	ArxPaxRegAddr_Power_map_speed_setpoint_3 = 0x00A7, // Power map speed setpoint 3
	ArxPaxRegAddr_Power_map_speed_setpoint_4 = 0x00A8, // Power map speed setpoint 4
	ArxPaxRegAddr_Power_map_speed_setpoint_5 = 0x00A9, // Power map speed setpoint 5
	ArxPaxRegAddr_Power_map_speed_setpoint_6 = 0x00AA, // Power map speed setpoint 6
	ArxPaxRegAddr_Power_map_speed_setpoint_7 = 0x00AB, // Power map speed setpoint 7
	ArxPaxRegAddr_Power_map_speed_setpoint_8 = 0x00AC, // Power map speed setpoint 8
	ArxPaxRegAddr_Minimum_motoring_torque = 0x00AD, // Torque setpoint at zero % throttle
	ArxPaxRegAddr_Reserved_L1_2 = 0x00AE, // Reserved for future use
	ArxPaxRegAddr_Pedal_speed_map_offset = 0x00AF, // Speed setpoint when the pedal rpm equals zero
	ArxPaxRegAddr_Pedal_speed_map_end = 0x00B0, // Pedal rpm that equates to full gain
	ArxPaxRegAddr_Engine_braking_torque = 0x00B1, // engine braking in % of full braking torque
	ArxPaxRegAddr_Pedalec_torque_symmetry = 0x00B2, // Defines symmetry or torque sensor for filtering  0=one cycle(default)  1=halfcycle  2=quarter cycle
	ArxPaxRegAddr_Pedalec_power_gain = 0x00B3, // Scales pedal torque in Nm to throttle % as using the following equation: Throttle = 100%* T(Nm)*G(pu)/64
	ArxPaxRegAddr_Pedalec_initial_torque = 0x00B4, // Initial torque value to compensate for the lack of an intial right leg measurement
	ArxPaxRegAddr_Pedalec_deadband_torque = 0x00B5, // Negative saturation value for calculating average pedal torque; use negative number to correct for pedaling form
	ArxPaxRegAddr_Torque_sensor_offset = 0x00B6, // Pedal assist torque sensor offset voltage
	ArxPaxRegAddr_Torque_sensor_gain = 0x00B7, // Equates sensor output voltage to a torque measurement
	ArxPaxRegAddr_Datalog_channel_1_select = 0x00B8, // Selection number = modbus address of the parameter/varialbe to be datalogged
	ArxPaxRegAddr_Datalog_channel_2_select = 0x00B9, // Selection number = modbus address of the parameter/varialbe to be datalogged
	ArxPaxRegAddr_Datalog_channel_3_select = 0x00BA, // Selection number = modbus address of the parameter/varialbe to be datalogged
	ArxPaxRegAddr_Datalog_channel_4_select = 0x00BB, // Selection number = modbus address of the parameter/varialbe to be datalogged
	ArxPaxRegAddr_Datalog_trigger_level = 0x00BC, // Oscilloscope's trigger level as a signed int.
	ArxPaxRegAddr_Datalog_trigger_mask = 0x00BD, // Mask for bit values; use 0xFFFF to disable
	ArxPaxRegAddr_Datalog_hold_off = 0x00BE, // Number of samples before trigger
	ArxPaxRegAddr_Datalog_timebase = 0x00BF, // Number of ISRs per sample
	ArxPaxRegAddr_Datalog_trigger_mode = 0x00C0, // 0 is rising / 1 is falling / 2 is equal to / 3 is not equal to
	ArxPaxRegAddr_Wheel_speed_sensor_source = 0x00C1, // 0 is cruise  / 1 is brake2 /  2 is Hall A
	ArxPaxRegAddr_High_battery_foldback_starting_voltage = 0x00C2, // Battery voltage level at which output foldback begins in order to protect the battery
	ArxPaxRegAddr_High_battery_foldback_end_voltage = 0x00C3, // Battery voltage level at which the output is folded back to 0 Amperes
	ArxPaxRegAddr_Low_battery_state_of_charge_alarm_threshold = 0x00C4, // Low battery state of charge alarm threshold
	ArxPaxRegAddr_Voltage_model_battery_state_of_charge_gain = 0x00C5, // % state of charge change for 1pu battery voltage change
	ArxPaxRegAddr_Voltage_model_battery_state_of_charge_offset = 0x00C6, // % state of charge offset value
	ArxPaxRegAddr_Torque_assist_1 = 0x00C7, // torque sensor gain multiplier for assist mode1
	ArxPaxRegAddr_Torque_assist_2 = 0x00C8, // torque sensor gain multiplier for assist mode2
	ArxPaxRegAddr_Torque_assist_3 = 0x00C9, // torque sensor gain multiplier for assist mode 3
	ArxPaxRegAddr_Rolling_start_speed_1 = 0x00CA, // Starting speed for assist mode 1
	ArxPaxRegAddr_Rolling_start_speed_2 = 0x00CB, // Starting speed for assist mode 2
	ArxPaxRegAddr_Rolling_start_speed_3 = 0x00CC, // Starting speed for assist mode 3
	ArxPaxRegAddr_Rolling_start_speed = 0x00CD, // Starting speed
	ArxPaxRegAddr_Regen_brake_speed = 0x00CE, // Minimum speed for regen brake
	ArxPaxRegAddr_Reserved_display_parameter = 0x00CF,
	ArxPaxRegAddr_Control_command_source = 0x00D0, // 0 is serial stream / 1 is throttle / 2 is pedal sensor / 3  is throttle AND pedal sensor / 4 is throttle OR pedal sensor /5 is torque sensor
	ArxPaxRegAddr_Battery_management_interface_type = 0x00D1, // 0 is none / 1 is voltage model / 2 is analog 10V / 3 is reserved / 4 is LIN / 5 is ModBus
	ArxPaxRegAddr_Assist_mode_source = 0x00D2, // 0 is none / 1 is analog / 2 is reserved / 3 is ASI / 4 is LIN / 5 is network gains
	ArxPaxRegAddr_Pedal_sensor_type = 0x00D3, // 0  is single Hall / 1 is dual Hall / 2 is FAG / 3 is Quadrature torque / 4 is Quadrature speed
	ArxPaxRegAddr_Features = 0x00D4,
	ArxPaxRegAddr_Throttle_full_voltage = 0x00D5, // Throttle voltage reading with the throttle open (fully on)
	ArxPaxRegAddr_Throttle_off_voltage = 0x00D6, // Throttle voltage reading with the throttle closed (fully off)
	ArxPaxRegAddr_Analogue_brake_full_voltage = 0x00D7, // Analog brake voltage reading that equates to the maximum brake setpoint
	ArxPaxRegAddr_Analogue_brake_off_voltage = 0x00D8, // Analog brake voltage reading that equates to the brake being off
	ArxPaxRegAddr_Assist_high_voltage_reading = 0x00D9, // Assist voltage reading when high level assist is selected
	ArxPaxRegAddr_Assist_low_voltage_reading = 0x00DA, // Assist voltage reading when low level assist is selected
	ArxPaxRegAddr_Assist_gain_1 = 0x00DB, // Assist mapping output multiplier at low assist voltage
	ArxPaxRegAddr_Positive_motoring_torque_ramp = 0x00DC, // Time required to reach the maximum motoring torque setpoint
	ArxPaxRegAddr_Negative_motoring_torque_ramp = 0x00DD, // Time required to reach the zero motoring torque
	ArxPaxRegAddr_Pedalec_positive_motoring_torque_ramp = 0x00DE, // Time required to reach the maximum motoring torque setpoint for pedal sensors
	ArxPaxRegAddr_Pedalec_negative_motoring_torque_ramp = 0x00DF, // Time required to reach the zero motoring torque for pedal sensors
	ArxPaxRegAddr_Positive_braking_torque_ramp = 0x00E0, // Time required to reach the maximum braking torque setpoint
	ArxPaxRegAddr_Negative_braking_torque_ramp = 0x00E1, // Time required to reach the zero braking torque
	ArxPaxRegAddr_Gear_ratio = 0x00E2, // Ratio of motor revolutions to one wheel revolution
	ArxPaxRegAddr_Wheel_diameter = 0x00E3, // Wheel diameter in mm
	ArxPaxRegAddr_Assist_cut_out_distance = 0x00E4, // Maximum distance the bike is allowed to travel  and provide assist power to the wheel after pedal activity has ceased
	ArxPaxRegAddr_Vehicle_maximum_speed = 0x00E5, // Vehicle speed limit for foldback in km/hr
	ArxPaxRegAddr_Vehicle_jog_speed = 0x00E6, // Vehicle speed limit for jog mode in km/hr
	ArxPaxRegAddr_Wheel_speed_sensor_pulses_per_revolution = 0x00E7, // Represents the wheel speed sensor's number of pulses per wheel revolution. 0 disables this feature
	ArxPaxRegAddr_Pedalec_minimum_timeout = 0x00E8, // Minimum time to disable pedal when no change is position is noticed
	ArxPaxRegAddr_Pedalec_maximum_timeout = 0x00E9, // Maximum time to disable pedal when no change is position is noticed
	ArxPaxRegAddr_Pedal_speed_sensor_pulses_per_revolution = 0x00EA, // Represents the pedal speed sensor's number of pulses per revolution.
	ArxPaxRegAddr_Pedal_sense_delay = 0x00EB, // Represents the number of pedal speed pulses that must be observed before the pedals are deemed to be active
	ArxPaxRegAddr_Vehicle_maximum_speed_2 = 0x00EC, // Secondary vehicle speed limit for foldback in km/hr
	ArxPaxRegAddr_Reserved_L1_6 = 0x00ED, // Reserved for future use
	ArxPaxRegAddr_Reserved_L1_7 = 0x00EE, // Reserved for future use
	ArxPaxRegAddr_Reserved_L1_8 = 0x00EF, // Reserved for future use
	ArxPaxRegAddr_Reserved_L1_9 = 0x00F0, // Reserved for future use
	ArxPaxRegAddr_Assist_speed_1 = 0x00F1, // Fraction of maximum speed when in low assist mode
	ArxPaxRegAddr_Reserved_L1_3 = 0x00F2, // Reserved for future use
	ArxPaxRegAddr_Reserved_L1_4 = 0x00F3, // Reserved for future use
	ArxPaxRegAddr_Reserved_L1_5 = 0x00F4, // Reserved for future use
	ArxPaxRegAddr_Assist_gain_2 = 0x00F5, // Represents the assist level when using medium assist mode (0.00 to 0.99) for LCD
	ArxPaxRegAddr_Assist_speed_2 = 0x00F6, // Represents the fraction of maximum speed for medium assist mode (0.00 to 0.99) for LCD
	ArxPaxRegAddr_Throttle_sensor_source = 0x00F7, // 0= Throttle Voltage,  1=brake1, 2=brake2, 3=CAN torque, 4=LIN, 5=Network Voltage, 6=10V bms in
	ArxPaxRegAddr_Cutoff_brake_sensor_source = 0x00F8, // 0=brake1, 1=brake2, 2=PFS, 3=cruise, 4=Network
	ArxPaxRegAddr_Regen_brake_source = 0x00F9, // 0=brake 2  1= brake 1 2=network 3=ASI
	ArxPaxRegAddr_Assist_Gain_3 = 0x00FA, // Gain for assist mode 3
	ArxPaxRegAddr_Assist_Speed_3 = 0x00FB, // Speed for assist mode 3
	ArxPaxRegAddr_Vehicle_jog_speed2 = 0x00FC, // Vehicle speed limit for boost mode, and inhibit speed for anti theft in km/hr
	ArxPaxRegAddr_Assist_Gain_Walk = 0x00FD, // Gain for walk mode
	ArxPaxRegAddr_Speed_limit_ramp_time = 0x00FE, // Speed limit ramp time for smooth clutch engagement on freewheel motors, 0 = disable
	ArxPaxRegAddr_CAN_sync_loss_timeout = 0x00FF, // timeout for CAN systems when no sync pulses are recieved
	ArxPaxRegAddr_software_revision_level = 0x0100, // Software revision level
	ArxPaxRegAddr_controller_status = 0x0101, // TBD
	ArxPaxRegAddr_faults = 0x0102,
	ArxPaxRegAddr_controller_temperature = 0x0103, // Base plate temperature
	ArxPaxRegAddr_vehicle_speed = 0x0104, // Calculated vehicle speed
	ArxPaxRegAddr_motor_temperature = 0x0105, // Motor temperature
	ArxPaxRegAddr_motor_current = 0x0106, // Motor peak current
	ArxPaxRegAddr_motor_rpm = 0x0107, // Motor speed
	ArxPaxRegAddr_motor_speed = 0x0108, // Motor speed
	ArxPaxRegAddr_battery_voltage = 0x0109, // Measured battery voltage
	ArxPaxRegAddr_battery_current = 0x010A, // Measured battery amperage
	ArxPaxRegAddr_battery_state_of_charge = 0x010B, // Remaining battery capacity
	ArxPaxRegAddr_battery_power = 0x010C, // Calculated battery output power
	ArxPaxRegAddr_last_fault = 0x010D,
	ArxPaxRegAddr_throttle_voltage = 0x010E, // Filtered throttle voltage
	ArxPaxRegAddr_brake_1_voltage = 0x010F, // Filtered brake 1 voltage
	ArxPaxRegAddr_brake_2_voltage = 0x0110, // Filtered brake 2 voltage
	ArxPaxRegAddr_raw_controller_temperature_sensor_voltage = 0x0111, // Unfiltered controller temperature sensor voltage
	ArxPaxRegAddr_light_sensor_voltage = 0x0112, // Filtered light sensor voltage
	ArxPaxRegAddr_analog_bms_soc_voltage = 0x0113, // Filtered BMS voltage
	ArxPaxRegAddr_digital_inputs = 0x0114,
	ArxPaxRegAddr_warnings = 0x0115,
	ArxPaxRegAddr_rotor_angle = 0x0116, // Motor electrical position
	ArxPaxRegAddr_battery_temperature = 0x0117, // battery temperature
	ArxPaxRegAddr_battery_power_percent = 0x0118, // battery power in W divided by rated power in W
	ArxPaxRegAddr_dsp_core_temperature = 0x0119, // DSP temperature
	ArxPaxRegAddr_phase_A_current = 0x011A, // Measured motor phase A current
	ArxPaxRegAddr_phase_B_current = 0x011B, // Calculated motor phase B current
	ArxPaxRegAddr_phase_C_current = 0x011C, // Measured motor phase C current
	ArxPaxRegAddr_phase_A_voltage = 0x011D, // Measured instantaneous motor phase A voltage
	ArxPaxRegAddr_phase_B_voltage = 0x011E, // Measured instantaneous motor phase B voltage
	ArxPaxRegAddr_phase_C_voltage = 0x011F, // Measured instantaneous motor phase C voltage
	ArxPaxRegAddr_boot_loader_software_revision = 0x0120, // Bootloader software revision
	ArxPaxRegAddr_light_supply_voltage = 0x0121, // 6V light supply voltage for headlight brake light and running light
	ArxPaxRegAddr_high_state_of_charge_foldback_gain = 0x0122, // high state of charge foldback on battery regen current
	ArxPaxRegAddr_raw_battery_voltage = 0x0123, // Unfiltered battery voltage measurement
	ArxPaxRegAddr_phase_A_voltage_per_unit = 0x0124, // Instantaneous phase A voltage measurement
	ArxPaxRegAddr_phase_B_voltage_per_unit = 0x0125, // Instantaneous phase B voltage measurement
	ArxPaxRegAddr_phase_C_voltage_per_unit = 0x0126, // Instantaneous phase C voltage measurement
	ArxPaxRegAddr_digital_outputs = 0x0127,
	ArxPaxRegAddr_ia_pu = 0x0128, // Reserved for future use
	ArxPaxRegAddr_ic_pu = 0x0129, // Reserved for future use
	ArxPaxRegAddr_overload_accumulator = 0x012A, // Accumulated i^2t overload heat in %
	ArxPaxRegAddr_faults2 = 0x012B,
	ArxPaxRegAddr_motor_phase_U_high_voltage_POST = 0x012C, // Measured phase U voltage at 85% duty cycle nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_U_low_voltage_POST = 0x012D, // Measured phase U voltage at 15% duty cycle nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_V_high_voltage_POST = 0x012E, // Measured phase V voltage at 85% duty cycle nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_V_low_voltage_POST = 0x012F, // Measured phase V voltage at 15% duty cycle nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_W_high_voltage_POST = 0x0130, // Measured phase W voltage at 85% duty cycle nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_W_low_voltage_POST = 0x0131, // Measured phase W voltage at 15% duty cycle nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_U_open_circuit_voltage_POST = 0x0132, // Measured phase U open circuit voltage nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_V_open_circuit_voltage_POST = 0x0133, // Measured phase V open circuit voltage nomalized to the battery voltage
	ArxPaxRegAddr_motor_phase_W_open_circuit_voltage_POST = 0x0134, // Measured phase W open circuit voltage nomalized to the battery voltage
	ArxPaxRegAddr_phase_regen_current_power_limit = 0x0135, // motor phase current limit due to power or battery current
	ArxPaxRegAddr_high_voltage_foldback_gain = 0x0136, // battery limit high voltage foldback gain
	ArxPaxRegAddr_wheel_RPM_speed_sensor_based_ = 0x0137, // Calculated wheel speed based on wheel speed sensor
	ArxPaxRegAddr_wheel_RPM_motor_based_ = 0x0138, // Calculated wheel speed based on motor pole pairs
	ArxPaxRegAddr_measured_wheel_RPM = 0x0139, // Measured wheel speed
	ArxPaxRegAddr_local_power_limit_command = 0x013A, // switched between 1.0 and ratio of alt rated power
	ArxPaxRegAddr_phase_A_current_sensor_offset = 0x013B, // % of full scale sensor reading (nominal value = 0.5)
	ArxPaxRegAddr_phase_C_current_sensor_offset = 0x013C, // % of full scale sensor reading (nominal value = 0.5)
	ArxPaxRegAddr_low_voltage_foldback_gain = 0x013D, // battery low voltage foldback gain
	ArxPaxRegAddr_phase_motoring_current_power_limit = 0x013E, // motor phase current limit due to power or battery current
	ArxPaxRegAddr_motor_i_2t_foldback_gain = 0x013F, // Motor I^2t overload foldback gain
	ArxPaxRegAddr_motor_temperature_foldback_gain = 0x0140, // Motor temperature foldback gain
	ArxPaxRegAddr_inverter_temperature_foldback_gain = 0x0141, // Inverter (hot and cold) foldback gain
	ArxPaxRegAddr_speed_limiter_output = 0x0142, // Current limit due to speed (speed reg mode 2 only)
	ArxPaxRegAddr_motoring_phase_current_limit = 0x0143, // Maximum motor current after thermal foldbacks applied
	ArxPaxRegAddr_low_state_of_charge_foldback_gain = 0x0144, // Battery low state of change foldback gain
	ArxPaxRegAddr_throttle_setpoint = 0x0145, // Filtered throttle signal
	ArxPaxRegAddr_brake_setpoint = 0x0146, // Filtered analog brake
	ArxPaxRegAddr_ebike_flags = 0x0147,
	ArxPaxRegAddr_instantaneous_pedal_speed = 0x0148, // instantaneous pedal speed
	ArxPaxRegAddr_assist_speed_limit = 0x0149, // Speed limit reduction based on assist mode
	ArxPaxRegAddr_sensorless_state = 0x014A, // Defines current state of sensorless startup state machine
	ArxPaxRegAddr_average_pedal_speed = 0x014B, // Measured pedal speed in RPM from pedal sensor
	ArxPaxRegAddr_average_pedal_torque = 0x014C, // Measured pedal torque in Nm from pedal sensor
	ArxPaxRegAddr_regen_phase_current_limit = 0x014D, // Maximum motor regen current after thermal foldbacks applied
	ArxPaxRegAddr_motor_input_power = 0x014E, // Motor input power in Watts
	ArxPaxRegAddr_torque_command = 0x014F, // Requested motor torque from sensors before rate limiting
	ArxPaxRegAddr_torque_reference = 0x0150, // Requested motor torque after rate limiting
	ArxPaxRegAddr_speed_ref_limit_command = 0x0151, // Speed limit in local mode
	ArxPaxRegAddr_pedal_speed_gain = 0x0152, // Pedal speed gain
	ArxPaxRegAddr_assist_level = 0x0153, // Assist level
	ArxPaxRegAddr_modbus1_CRC_error_count = 0x0154, // Number of ModBus CRC errors since power-up or reset on port1.
	ArxPaxRegAddr_modbus1_HW_errors = 0x0155, // Number of UART errors since power-up or reset on port1.
	ArxPaxRegAddr_modbus2_CRC_error_count = 0x0156, // Number of ModBus CRC errors since power-up or reset on port2.
	ArxPaxRegAddr_modbus2_HW_errors = 0x0157, // Number of UART errors since power-up or reset on port2.
	ArxPaxRegAddr_reserved_L4_4 = 0x0158, // reserved for future use
	ArxPaxRegAddr_vd = 0x0159, // Filtered D axis voltage
	ArxPaxRegAddr_vq = 0x015A, // Filtered Q axis voltage
	ArxPaxRegAddr_d_feedback_avg = 0x015B, // Filtered D axis current
	ArxPaxRegAddr_q_feedback_avg = 0x015C, // Filtered Q axis current
	ArxPaxRegAddr_torque_sensor_offset_voltage = 0x015D, // torque sensor offset voltage power up calibration
	ArxPaxRegAddr_current_ISR_execution_time = 0x015E, // Measured ISR execution time
	ArxPaxRegAddr_peak_ISR_execution_time = 0x015F, // Peak ISR execution time
	ArxPaxRegAddr_peak_1ms_loop_time = 0x0160, // Measured execution time
	ArxPaxRegAddr_average_1ms_time = 0x0161, // Measured execution time
	ArxPaxRegAddr_1ms_time = 0x0162, // Measured execution time
	ArxPaxRegAddr_execution_time_4 = 0x0163, // Measured execution time
	ArxPaxRegAddr_execution_time_5 = 0x0164, // Measured execution time
	ArxPaxRegAddr_execution_time_6 = 0x0165, // Measured execution time
	ArxPaxRegAddr_execution_time_7 = 0x0166, // Measured execution time
	ArxPaxRegAddr_execution_time_8 = 0x0167, // Measured execution time
	ArxPaxRegAddr_execution_time_9 = 0x0168, // Measured execution time
	ArxPaxRegAddr_execution_time_10 = 0x0169, // Measured execution time
	ArxPaxRegAddr_execution_time_11 = 0x016A, // Measured execution time
	ArxPaxRegAddr_custom_code_crc_high = 0x016B, // High word of the 32 bit CRC calculation of the custom code
	ArxPaxRegAddr_custom_code_crc_low = 0x016C, // Low word of the 32 bit CRC calculation of the custom code
	ArxPaxRegAddr_custom_code_execution_time = 0x016D, // Measured execution time
	ArxPaxRegAddr_v_integral = 0x016E, // Speed regulator integral term
	ArxPaxRegAddr_v_output = 0x016F, // Speed regulator output
	ArxPaxRegAddr_v_error = 0x0170, // Speed regulator error term
	ArxPaxRegAddr_v_proportional = 0x0171, // Speed regulator proportional term
	ArxPaxRegAddr_d_integral = 0x0172, // D axis current loop integral term
	ArxPaxRegAddr_q_integral = 0x0173, // Q axis current loop integral term
	ArxPaxRegAddr_d_output = 0x0174, // D axis current loop output
	ArxPaxRegAddr_q_output = 0x0175, // Q axis current loop output
	ArxPaxRegAddr_d_error = 0x0176, // D axis current loop error term
	ArxPaxRegAddr_q_error = 0x0177, // Q axis current loop error term
	ArxPaxRegAddr_d_proportional = 0x0178, // D axis current loop proportional term
	ArxPaxRegAddr_q_proportional = 0x0179, // Q axis current loop proportional term
	ArxPaxRegAddr_q_limit_from_d = 0x017A, // q axis limit based on d axis
	ArxPaxRegAddr_battery_i_2t_foldback_gain = 0x017B, // battery I^2t overload foldback gain
	ArxPaxRegAddr_d_feedback = 0x017C, // D axis current loop feedback
	ArxPaxRegAddr_q_feedback = 0x017D, // Q axis current loop feedback
	ArxPaxRegAddr_d_reference = 0x017E, // D axis current loop reference
	ArxPaxRegAddr_q_reference = 0x017F, // Q axis current loop reference
	ArxPaxRegAddr_maximum_measurable_current = 0x0180,
	ArxPaxRegAddr_maximum_measurable_voltage = 0x0181,
	ArxPaxRegAddr_positive_battery_limit = 0x0182, // motoring battery current limit after battery foldbacks
	ArxPaxRegAddr_negative_battery_limit = 0x0183, // regen battery current limit after battery foldbacks
	ArxPaxRegAddr_stator_current_alpha = 0x0184, // Stationary alpha axis rotor current (Factory only)
	ArxPaxRegAddr_stator_current_beta = 0x0185, // Stationary beta axis rotor current (Factory only)
	ArxPaxRegAddr_flux_alpha = 0x0186, // Flux model phase Alpha output
	ArxPaxRegAddr_flux_beta = 0x0187, // Flux model phase Beta output
	ArxPaxRegAddr_flux_frequency = 0x0188, // Frequency of flux model
	ArxPaxRegAddr_flux_magnitude = 0x0189, // Magnitude of flux
	ArxPaxRegAddr_flux_angle = 0x018A, // Angle of flux
	ArxPaxRegAddr_open_loop_angle = 0x018B, // Open loop mode angle
	ArxPaxRegAddr_calculated_battery_current_motoring_limit = 0x018C, // Effective motoring battery current limit
	ArxPaxRegAddr_calculated_battery_current_braking_limit = 0x018D, // Effective braking battery current limit
	ArxPaxRegAddr_motor_temperature_sensor_voltage = 0x018E, // Motor temperature sensor voltage at the A/D converter to compare with the table.
	ArxPaxRegAddr_pu_Lm = 0x018F, // per unit magnetizing inductance
	ArxPaxRegAddr_debug1 = 0x0190, // Debug variable for general development use
	ArxPaxRegAddr_debug2 = 0x0191, // Debug variable for general development use
	ArxPaxRegAddr_debug3 = 0x0192, // Debug variable for general development use
	ArxPaxRegAddr_debug4 = 0x0193, // Debug variable for general development use
	ArxPaxRegAddr_debug5 = 0x0194, // Debug variable for general development use
	ArxPaxRegAddr_debug6 = 0x0195, // Debug variable for general development use
	ArxPaxRegAddr_debug7 = 0x0196, // Debug variable for general development use
	ArxPaxRegAddr_debug8 = 0x0197, // Debug variable for general development use
	ArxPaxRegAddr_trip_meter = 0x0198, // distance travelled in km since power up
	ArxPaxRegAddr_pedalec_timeout_delay = 0x0199, // calculated pedalec_timeout_delay from speed and stop distance
	ArxPaxRegAddr_pll_angle = 0x019A, // Phase locked loop angle
	ArxPaxRegAddr_pll_error = 0x019B, // Phase locked loop error term
	ArxPaxRegAddr_pll_PI_frequency = 0x019C, // Phase locked loop PI frequency
	ArxPaxRegAddr_pll_proportional = 0x019D, // Phase locked loop proportional term
	ArxPaxRegAddr_pll_integral = 0x019E, // Phase locked loop intergral term
	ArxPaxRegAddr_rotor_frequency = 0x019F, // Rotor's electrical frequency of rotation
	ArxPaxRegAddr_pll_reference_angle = 0x01A0, // Phase locked loop reference angle
	ArxPaxRegAddr_hall_angle = 0x01A1, // Motor Hall angle
	ArxPaxRegAddr_last_fault2 = 0x01A2,
	ArxPaxRegAddr_hall_frequency = 0x01A3, // Hall signal frequency
	ArxPaxRegAddr_q_limit = 0x01A4,
	ArxPaxRegAddr_d_limit = 0x01A5,
	ArxPaxRegAddr_id_ref_trim = 0x01A6,
	ArxPaxRegAddr_id_ref_fdfwd = 0x01A7,
	ArxPaxRegAddr_autotune_Lm = 0x01A8, // Autotuned value for magnetizing inductance as calculated by the autotune motor parameter test
	ArxPaxRegAddr_autotune_Rs = 0x01A9, // Stator winding resistance as calculated by the autotune motor parameter test
	ArxPaxRegAddr_autotune_Ls = 0x01AA, // Stator winding inductance as calculated by the autotune motor parameter test
	ArxPaxRegAddr_pu_Rs = 0x01AB, // Per unit stator line to neutral stator resistance (factory use only)
	ArxPaxRegAddr_pu_Ls = 0x01AC, // Per unit stator line to neutral stator inductance (factory use only)
	ArxPaxRegAddr_rated_electrical_frequency = 0x01AD, // The rated electrical commutation frequency = Npolepairs*Rated_rpm/60
	ArxPaxRegAddr_spare_var_7 = 0x01AE, // (factory use only)
	ArxPaxRegAddr_spare_var_8 = 0x01AF, // (factory use only)
	ArxPaxRegAddr_spare_var_9 = 0x01B0, // (factory use only)
	ArxPaxRegAddr_Ia_rms = 0x01B1, // phase a rms current for calibration
	ArxPaxRegAddr_Ic_rms = 0x01B2, // phase c rms current for calibration
	ArxPaxRegAddr_Iq_trim_q12 = 0x01B3, // (factory use only)
	ArxPaxRegAddr_modulation_index = 0x01B4, // (factory use only)
	ArxPaxRegAddr_pwm_cmd_a_pwm = 0x01B5, // (Factory only)
	ArxPaxRegAddr_pwm_cmd_b_pwm = 0x01B6, // (Factory only)
	ArxPaxRegAddr_pwm_cmd_c_pwm = 0x01B7, // (Factory only)
	ArxPaxRegAddr_autotune_hall_sector_0_ = 0x01B8, // Output of the auto tune hall sequence test for sector [0]
	ArxPaxRegAddr_autotune_hall_sector_1_ = 0x01B9, // Output of the auto tune hall sequence test for sector [1]
	ArxPaxRegAddr_autotune_hall_sector_2_ = 0x01BA, // Output of the auto tune hall sequence test for sector [2]
	ArxPaxRegAddr_autotune_hall_sector_3_ = 0x01BB, // Output of the auto tune hall sequence test for sector [3]
	ArxPaxRegAddr_autotune_hall_sector_4_ = 0x01BC, // Output of the auto tune hall sequence test for sector [4]
	ArxPaxRegAddr_autotune_hall_sector_5_ = 0x01BD, // Output of the auto tune hall sequence test for sector [5]
	ArxPaxRegAddr_autotune_hall_sector_6_ = 0x01BE, // Output of the auto tune hall sequence test for sector [6]
	ArxPaxRegAddr_autotune_hall_sector_7_ = 0x01BF, // Output of the auto tune hall sequence test for sector [7]
	ArxPaxRegAddr_parameter_CRC32_high_word = 0x01C0, // High word of the 32 bit CRC calculation of the parameters
	ArxPaxRegAddr_parameter_CRC32_low_word = 0x01C1, // Low word of the 32 bit CRC calculation of the parameters
	ArxPaxRegAddr_user_access_level = 0x01C2, // Current user parameter access level
	ArxPaxRegAddr_bootloader_CRC32_high_word = 0x01C3, // High word of the 32 bit CRC calculation of the bootloader
	ArxPaxRegAddr_bootloader_CRC32_low_word = 0x01C4, // Low word of the 32 bit CRC calculation of the bootloader
	ArxPaxRegAddr_application_CRC32_high_word = 0x01C5, // High word of the 32 bit CRC calculation of the application software
	ArxPaxRegAddr_application_CRC32_low_word = 0x01C6, // Low word of the 32 bit CRC calculation of the application software
	ArxPaxRegAddr_Silicon_Revision = 0x01C7, // Reserved for factory use
	ArxPaxRegAddr_execution_time_15 = 0x01C8, // Reserved for future use
	ArxPaxRegAddr_check_execution_time_16 = 0x01C9, // Reserved for future use
	ArxPaxRegAddr_peak_background_period = 0x01CA, // Reserved for future use
	ArxPaxRegAddr_avg_background_period = 0x01CB, // Reserved for future use
	ArxPaxRegAddr_autotune_hall_offset_angle = 0x01CC, // estimated hall offset angle
	ArxPaxRegAddr_autotune_Kv = 0x01CD, // Motor back electromotive force constant that is equivalent to per unit system voltage/per unit rated speed
	ArxPaxRegAddr_autotune_rated_rpm = 0x01CE, // Nameplate no load rated motor RPM
	ArxPaxRegAddr_torque_assist = 0x01CF, // torque sensor multiplier for assist mode
	ArxPaxRegAddr_rolling_start_speed = 0x01D0, // rolling start speed for assist mode
	ArxPaxRegAddr_OTP_serial_number0 = 0x01D1, // Reserved for factory use
	ArxPaxRegAddr_OTP_serial_number1 = 0x01D2, // Reserved for factory use
	ArxPaxRegAddr_OTP_serial_number2 = 0x01D3, // Reserved for factory use
	ArxPaxRegAddr_OTP_serial_number3 = 0x01D4, // Reserved for factory use
	ArxPaxRegAddr_OTP_serial_number4 = 0x01D5, // Reserved for factory use
	ArxPaxRegAddr_OTP_serial_number5 = 0x01D6, // Reserved for factory use
	ArxPaxRegAddr_OTP_serial_number6 = 0x01D7, // Reserved for factory use
	ArxPaxRegAddr_OTP_serial_number7 = 0x01D8, // Reserved for factory use
	ArxPaxRegAddr_Speed_command = 0x01D9, // Speed command scaled a % of rated motor speed (used in networked configuration only)
	ArxPaxRegAddr_Maximum_motoring_current = 0x01DA, // Maximum motoring current limit scaled a % of rated rated motor current (from local or remote VCM)
	ArxPaxRegAddr_Maximum_braking_current = 0x01DB, // Maximum braking current limit scaled a % of rated rated motor current (from local or remote VCM)
	ArxPaxRegAddr_State_command = 0x01DC, // State command where 1 = IDLE and 2 = RUN (used in networked configuration only)
	ArxPaxRegAddr_Torque_command = 0x01DD, // Torque command scaled a % of rated motor current (used in networked configuration only)
	ArxPaxRegAddr_Running_Light_PWM_Daylight_ = 0x01DE, // 0 to 100%
	ArxPaxRegAddr_Brake_Light_PWM_Daylight_ = 0x01DF, // 0 to 100%
	ArxPaxRegAddr_Test_mode = 0x01E0, // 0 is closed loop current mode (standard operating mode) / 2 is open loop voltage mode / 3 is open loop current mode
	ArxPaxRegAddr_Motor_discover_mode = 0x01E1, // 0 is off / 1 is motor stationary parameter discover / 2 is moving parameter discover
	ArxPaxRegAddr_Open_loop_modulation = 0x01E2, // Per unit modulation current/voltage
	ArxPaxRegAddr_Open_loop_current = 0x01E3, // Open loop current injection mode setpoint
	ArxPaxRegAddr_Open_loop_frequency = 0x01E4, // Frequency of open loop current/voltage injection (if open loop angle is zero)
	ArxPaxRegAddr_Open_loop_angle = 0x01E5, // Open loop static electrical angle (over-rides frequency setpoint)
	ArxPaxRegAddr_debug_cmd1 = 0x01E6, // Reserved for future use
	ArxPaxRegAddr_debug_cmd2 = 0x01E7, // Reserved for future use
	ArxPaxRegAddr_debug_cmd3 = 0x01E8, // Reserved for future use
	ArxPaxRegAddr_debug_cmd4 = 0x01E9, // Reserved for future use
	ArxPaxRegAddr_Remote_speed_command = 0x01EA, // Speed command scaled a % of rated motor speed (only used if command control source = serial)
	ArxPaxRegAddr_Remote_maximum_motoring_current = 0x01EB, // Maximum motoring current limit scaled a % of rated rated motor current (only used if command control source = serial)
	ArxPaxRegAddr_Remote_maximum_braking_current = 0x01EC, // Maximum braking current limit scaled a % of rated rated motor current (only used if command control source = serial)
	ArxPaxRegAddr_Remote_state_command = 0x01ED, // State command where 1 = IDLE and 2 = RUN (only used if command control source = serial)
	ArxPaxRegAddr_Remote_torque_command = 0x01EE, // Torque command scaled a % of rated motor xxxx (only used if command control source = serial)
	ArxPaxRegAddr_Remote_Throttle_Voltage = 0x01EF, // Networked throttle voltage
	ArxPaxRegAddr_Remote_Digital_Commands = 0x01F0,
	ArxPaxRegAddr_Remote_Analog_brake_voltage = 0x01F1, // for remote analog brake levers on a display
	ArxPaxRegAddr_Parameter_read_access_code = 0x01F2, // enter code here to enable reading of parameters
	ArxPaxRegAddr_Bidirectional_torque_command = 0x01F3, // positive for motoring, zero for idle negative for braking
	ArxPaxRegAddr_Display_speed_limit_command = 0x01F4, // Fraction of maximum speed when using a display based assist mode
	ArxPaxRegAddr_Display_assist_level_command = 0x01F5, // Fraction of maximum assist level when using a display based assist mode
	ArxPaxRegAddr_Display_walk_command = 0x01F6,
	ArxPaxRegAddr_Remote_battery_SOC = 0x01F7, // state of charge from modbus from remote bms
	ArxPaxRegAddr_Remote_battery_temperature = 0x01F8, // battery temperature from BMS
	ArxPaxRegAddr_Remote_light_sensor_voltage = 0x01F9, // light sensor voltage from display
	ArxPaxRegAddr_Remote_assist_mode = 0x01FA, // assist mode from display 0=off, 1,2,3,4=mode, 6=walk
	ArxPaxRegAddr_Arm_datalogger = 0x01FB, // Set to 1 to arm the built in scope. Reports 2 if stopped
	ArxPaxRegAddr_Fault_clear = 0x01FC, // Write a nonzero value to clear fault
	ArxPaxRegAddr_Parameter_access_code = 0x01FD, // This hex code determines which level of parameters the user has access to
	ArxPaxRegAddr_Load_firmware_to_flash = 0x01FE, // Set to 0x7FFF to load new application software
	ArxPaxRegAddr_Write_parameters_to_flash = 0x01FF, // Set to 0x7FFF to save parameters to flash. 0x3FFF to burn serial number to OTP. Returns 0x1000 if OK or 0x2000 if fail.
	ArxPaxRegAddr_ptable1 = 0x0600, // ptable test
	ArxPaxRegAddr_ptable2 = 0x0601, // ptable test
	ArxPaxRegAddr_ptable3 = 0x0602, // ptable test
	ArxPaxRegAddr_ptable4 = 0x0603, // ptable test
	ArxPaxRegAddr_ptable5 = 0x0604, // ptable test
	ArxPaxRegAddr_ptable6 = 0x0605, // ptable test
	ArxPaxRegAddr_ptable7 = 0x0606, // ptable test
	ArxPaxRegAddr_ptable8 = 0x0607, // ptable test
	ArxPaxRegAddr_ptable9 = 0x0608, // ptable test
	ArxPaxRegAddr_ptable10 = 0x0609, // ptable test
	ArxPaxRegAddr_RPDO1_map1_sub_index_and_size = 0x0700, // RPDO1 map1 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO1_map1_index = 0x0701, // RPDO1 map1 index
	ArxPaxRegAddr_RPDO1_map2_sub_index_and_size = 0x0702, // RPDO1 map2 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO1_map2_index = 0x0703, // RPDO1 map2 index
	ArxPaxRegAddr_RPDO1_map3_sub_index_and_size = 0x0704, // RPDO1 map3 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO1_map3_index = 0x0705, // RPDO1 map3 index
	ArxPaxRegAddr_RPDO1_map4_sub_index_and_size = 0x0706, // RPDO1 map4 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO1_map4_index = 0x0707, // RPDO1 map4 index
	ArxPaxRegAddr_RPDO1_size_words_ = 0x0708, // RPDO1 size in words
	ArxPaxRegAddr_RPDO1_transmission_type = 0x0709, // asynchronous only (0 to disable, N to enable)
	ArxPaxRegAddr_RPDO1_timeout = 0x070A, // RPDO1 timeout in ms (0 to disable)
	ArxPaxRegAddr_parameters2_spare1 = 0x070B, // (not used)
	ArxPaxRegAddr_RPDO2_map1_sub_index_and_size = 0x070C, // RPDO2 map1 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO2_map1_index = 0x070D, // RPDO2 map1 index
	ArxPaxRegAddr_RPDO2_map2_sub_index_and_size = 0x070E, // RPDO2 map2 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO2_map2_index = 0x070F, // RPDO2 map2 index
	ArxPaxRegAddr_RPDO2_map3_sub_index_and_size = 0x0710, // RPDO2 map3 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO2_map3_index = 0x0711, // RPDO2 map3 index
	ArxPaxRegAddr_RPDO2_map4_sub_index_and_size = 0x0712, // RPDO2 map4 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_RPDO2_map4_index = 0x0713, // RPDO2 map4 index
	ArxPaxRegAddr_RPDO2_size_words_ = 0x0714, // RPDO2 size in words
	ArxPaxRegAddr_RPDO2_transmission_type = 0x0715, // asynchronous only (0 to disable, N to enable)
	ArxPaxRegAddr_RPDO2_timeout = 0x0716, // RPDO2 timeout in ms (0 to disable)
	ArxPaxRegAddr_parameters2_spare2 = 0x0717, // (not used)
	ArxPaxRegAddr_TPDO1_map1_sub_index_and_size = 0x0718, // TPDO1 map1 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO1_map1_index = 0x0719, // TPDO1 map1 index
	ArxPaxRegAddr_TPDO1_map2_sub_index_and_size = 0x071A, // TPDO1 map2 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO1_map2_index = 0x071B, // TPDO1 map2 index
	ArxPaxRegAddr_TPDO1_map3_sub_index_and_size = 0x071C, // TPDO1 map3 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO1_map3_index = 0x071D, // TPDO1 map3 index
	ArxPaxRegAddr_TPDO1_map4_sub_index_and_size = 0x071E, // TPDO1 map4 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO1_map4_index = 0x071F, // TPDO1 map4 index
	ArxPaxRegAddr_TPDO1_size_words_ = 0x0720, // TPDO1 size in words
	ArxPaxRegAddr_TPDO1_transmission_type = 0x0721, // TPDO1 number of syncs per transmission 0 to 240 (0 to disable, N for every Nth sync)
	ArxPaxRegAddr_TPDO1_event_time = 0x0722, // TPDO1 event time in ms for async tpdos (0 to disable)
	ArxPaxRegAddr_TPDO1_sync_window = 0x0723, // TPDO1  sync window (not used)
	ArxPaxRegAddr_TPDO2_map1_sub_index_and_size = 0x0724, // TPDO2 map1 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO2_map1_index = 0x0725, // TPDO2 map1 index
	ArxPaxRegAddr_TPDO2_map2_sub_index_and_size = 0x0726, // TPDO2 map2 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO2_map2_index = 0x0727, // TPDO2 map2 index
	ArxPaxRegAddr_TPDO2_map3_sub_index_and_size = 0x0728, // TPDO2 map3 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO2_map3_index = 0x0729, // TPDO2 map3 index
	ArxPaxRegAddr_TPDO2_map4_sub_index_and_size = 0x072A, // TPDO2 map4 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO2_map4_index = 0x072B, // TPDO2 map4 index
	ArxPaxRegAddr_TPDO2_size_words_ = 0x072C, // TPDO2 size in words
	ArxPaxRegAddr_TPDO2_transmission_type = 0x072D, // TPDO2 number of syncs per transmission 0 to 240 (0 to disable, N for every Nth sync)
	ArxPaxRegAddr_TPDO2_event_time = 0x072E, // TPDO2 event time in ms for async tpdos (0 to disable)
	ArxPaxRegAddr_TPDO2_sync_window = 0x072F, // TPDO2  sync window (not used)
	ArxPaxRegAddr_TPDO3_map1_sub_index_and_size = 0x0730, // TPDO3 map1 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO3_map1_index = 0x0731, // TPDO3 map1 index
	ArxPaxRegAddr_TPDO3_map2_sub_index_and_size = 0x0732, // TPDO3 map2 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO3_map2_index = 0x0733, // TPDO3 map2 index
	ArxPaxRegAddr_TPDO3_map3_sub_index_and_size = 0x0734, // TPDO3 map3 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO3_map3_index = 0x0735, // TPDO3 map3 index
	ArxPaxRegAddr_TPDO3_map4_sub_index_and_size = 0x0736, // TPDO3 map4 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO3_map4_index = 0x0737, // TPDO3 map4 index
	ArxPaxRegAddr_TPDO3_size_words_ = 0x0738, // TPDO3 size in words
	ArxPaxRegAddr_TPDO3_transmission_type = 0x0739, // TPDO3 number of syncs per transmission 0 to 240 (0 to disable, N for every Nth sync)
	ArxPaxRegAddr_TPDO3_event_time = 0x073A, // TPDO3 event time in ms for async tpdos (0 to disable)
	ArxPaxRegAddr_TPDO3_sync_window = 0x073B, // TPDO3  sync window (not used)
	ArxPaxRegAddr_TPDO4_map1_sub_index_and_size = 0x073C, // TPDO4 map1 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO4_map1_index = 0x073D, // TPDO4 map1 index
	ArxPaxRegAddr_TPDO4_map2_sub_index_and_size = 0x073E, // TPDO4 map2 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO4_map2_index = 0x073F, // TPDO4 map2 index
	ArxPaxRegAddr_TPDO4_map3_sub_index_and_size = 0x0740, // TPDO4 map3 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO4_map3_index = 0x0741, // TPDO4 map3 index
	ArxPaxRegAddr_TPDO4_map4_sub_index_and_size = 0x0742, // TPDO4 map4 sub index (high byte) and size in bits (low bit)
	ArxPaxRegAddr_TPDO4_map4_index = 0x0743, // TPDO4 map4 index
	ArxPaxRegAddr_TPDO4_size_words_ = 0x0744, // TPDO4 size in words
	ArxPaxRegAddr_TPDO4_transmission_type = 0x0745, // TPDO4 number of syncs per transmission 0 to 240 (0 to disable, N for every Nth sync)
	ArxPaxRegAddr_TPDO4_event_time = 0x0746, // TPDO4 event time in ms for async tpdos (0 to disable)
	ArxPaxRegAddr_TPDO4_sync_window = 0x0747, // TPDO4  sync window (not used)
	ArxPaxRegAddr_CAN_quiet_after_sleep_command = 0x0748, // time the controller is quiet (no CAN packets) after a sleep command
	ArxPaxRegAddr_CAN_quiet_after_sync_loss = 0x0749, // time the controller is quiet (no CAN packets) after a sync loss
	ArxPaxRegAddr_CAN_heartbeat_period = 0x074A, // period for transmitting the hearbeat signal in ms
